temp <- read.csv(file.choose(),  blank.lines.skip = T)
View(temp)
temp <- read.csv(file.choose(), nrows = 10)
View(temp)
temp <- read.csv(file.choose(), nrows = 10)
View(temp)
start_date <- temp$DustTrak.DRX[[7]]
start_date[1]
View(temp)
temp <- read.csv(file.choose(), nrows = 2, skip = 6)
View(temp)
temp <- read.csv(file.choose(), nrows = 2, skip = 6, header = F)
View(temp)
names(temp)
start_date <- temp[2,2]
start_date[1]
temp <- read.csv(file.choose(), nrows = 2, skip = 6, header = F, as.is = T)
View(temp)
start_date <- temp[2,2]
start_time <- temp[2,1]
start_time <- temp[1,2]
View(temp)
start <- paste(start_date, start_time, sep = " ")
file_name = file.choose()
temp <- read.csv(file = "file_name", nrows = 2, skip = 6, header = F, as.is = T)
temp <- read.csv(file = file_name, nrows = 2, skip = 6, header = F, as.is = T)
start_date <- temp[2,2]
start_time <- temp[1,2]
start <- paste(start_date, start_time, sep = " ")
data <- read.csv(file = file_name, skip = 37, header = T)
View(data)
data <- read.csv(file = file_name, skip = 36, header = T)
View(data)
View(data)
names(data)
date <- as.POSIXct(data$Elapsed.Time..s., origin = start, tz = "Etc/GMT-10")
start <- as.POSIXct(paste(start_date, start_time, sep = " "))
start <- paste(start_date, start_time, sep = " ")
start <- as.POSIXct(start, format = "%d/%m/%Y %H:%M:%S )
#this reads in the file:
data <- read.csv(file = file_name, skip = 36, header = T)
names(data)
date <- as.POSIXct(data$Elapsed.Time..s., origin = start, tz = "Etc/GMT-10")
names(data)
date <- as.POSIXct(data$Elapsed.Time..s., origin = start, tz = "Etc/GMT-10")
start <- paste(start_date, start_time, sep = " ")
start <- as.POSIXct(start, format = "%d/%m/%Y %H:%M:%S )
start <- as.POSIXct(start, format = "%d/%m/%Y %H:%M:%S" )
start <- as.POSIXct(start, format = "%d/%m/%Y %H:%M:%S" )
#this reads in the file:
data <- read.csv(file = file_name, skip = 36, header = T)
names(data)
date <- as.POSIXct(data$Elapsed.Time..s., origin = start, tz = "Etc/GMT-10")
head(date)
names(data)
names(data) <- stri_replace_all_fixed(names(data), ".", " ")
library(openair)
library(stringi)
names(data) <- stri_replace_all_fixed(names(data), ".", " ")
names(data)
names(data) <- stri_replace_all_fixed(names(data), ".", "")
names(data)
names(data) <- stri_replace_all_fixed(names(data), ".", "_")
names(data)
names(data) <- stri_replace_all_fixed(names(data), ".", "_")
names(data)
var_names <- names(data)
var_names
data <- read.csv(file = file_name, skip = 36, header = T)
var_names <- names(data)
var_names
var_names <- stri_replace_all_fixed(var_names, ".", "")
var_names
var_names <- stri_replace_all_fixed(var_names, ".", "")
var_names <- names(data)
var_names <- stri_replace_all_fixed(var_names, ".", "_")
var_names
var_names <- names(data)
var_names <- stri_replace_all_fixed(var_names, ".", " ")
var_names
gps <- import(file.choose(), date = "Date", date.format = "%d.%m.%Y", time = "UTC", time.format = "%H:%M:%S", tz = "GMT", sep = ";")
test <- read.delim(file.choose(), sep = ";", skip = 1, header = T)
View(test)
test$date <- paste(test$Date, test$UTC, sep = " ")
head(date)
head(test$date)
test$date <- as.POSIXct(test$date, format = "%d.%m.%Y %H:%M:%S", tz = "GMT")
head(test$date)
names(test)
gps <- subset(test, select = c("date", "Latitude", "Longitude")
)
timePlot(gps, pollutant = "Latitude") #the plot won't work or will look weird if something is wrong
timePlot(gps, pollutant = "Longitude") #the plot won't work or will look weird if something is wrong
View(test)
gps <- subset(test, select = -c("Date", "UTC", "X"))
gps <-  subset(test, select = -c("Date", "UTC", "X"))
gps <- select(test, -c("Date", "UTC", "X"))
library(dplyr)
gps <- select(test, -c("Date", "UTC", "X"))
names(test)
gps <- test[,5:19]
View(gps)
gps <- test[,(2,5:19)]
gps <- test[,2,5:19]
gps <- test[,5:19]
timePlot(gps, pollutant = "Extern..Temp..C.") #the plot won't work or will look weird if something is wrong
test <- read.delim(file.choose(), sep = ";", skip = 1, header = T, check.names = F)
View(test)
names(test)
test$date <- paste(test$Date, test$UTC, sep = " ")
test$date <- as.POSIXct(test$date, format = "%d.%m.%Y %H:%M:%S", tz = "GMT")
head(test$date)
timePlot(test, pollutant = "Extern: Temp [C]") #the plot won't work or will look weird if something is wrong
##to create decimal lat and lon values
degree_lat <- "([0-9]{2})"
degree_lon <- "([0-9]{3})"
minutes <- "([0-9]{2})[.]([0-9]{5})"
gps$lat <- -(as.numeric(str_extract(gps$Latitude, degree_lat)) + (as.numeric(str_extract(gps$Latitude,minutes)) / 60))
library(stringr)
gps$lat <- -(as.numeric(str_extract(gps$Latitude, degree_lat)) + (as.numeric(str_extract(gps$Latitude,minutes)) / 60))
gps$lon <- (as.numeric(str_extract(gps$Longitude, degree_lon)) + (as.numeric(str_extract(gps$Longitude,minutes)) / 60))
#test that the gps coordinates are understood by R (a map should appear!):
GoogleMapsPlot(gps, latitude = "lat", longitude = "lon", pollutant = "Extern: Temp [C]", cex = 1,  maptype = "satellite")
test$lat <- -(as.numeric(str_extract(gps$Latitude, degree_lat)) + (as.numeric(str_extract(gps$Latitude,minutes)) / 60))
test$lon <- (as.numeric(str_extract(gps$Longitude, degree_lon)) + (as.numeric(str_extract(gps$Longitude,minutes)) / 60))
#test that the gps coordinates are understood by R (a map should appear!):
GoogleMapsPlot(test, latitude = "lat", longitude = "lon", pollutant = "Extern: Temp [C]", cex = 1,  maptype = "satellite")
gps <- test[, c("date", "lat", "lon")]
View(gps)
file_name = file.choose()
#this reads in the start date and start time, which we will use to create a date vector later on
temp <- read.csv(file = file_name, nrows = 2, skip = 6, header = F, as.is = T)
start_date <- temp[2,2]
start_time <- temp[1,2]
start <- paste(start_date, start_time, sep = " ")
start <- as.POSIXct(start, format = "%d/%m/%Y %H:%M:%S" ) #this converts the start date/time to a format that recognises
#this reads in the actual data:
PM <- read.csv(file = file_name, skip = 36, header = T)
# this creates a date vector that we can then add to our dataframe
date <- as.POSIXct(PM$Elapsed.Time..s., origin = start, tz = "Etc/GMT-10")
PM <- cbind(date, PM)
#Now, we need to clean up the file a bit, as the names are pretty awful (R replaces blank spaces and brackets by dots)
temp <- read.csv(file = file_name, nrows = 2, skip = 6, header = F, as.is = T, check.names = F)
start_date <- temp[2,2]
start_time <- temp[1,2]
start <- paste(start_date, start_time, sep = " ")
start <- as.POSIXct(start, format = "%d/%m/%Y %H:%M:%S" ) #this converts the start date/time to a format that recognises
temp <- read.csv(file = file_name, nrows = 2, skip = 6, header = F, as.is = T)
start_date <- temp[2,2]
start_time <- temp[1,2]
start <- paste(start_date, start_time, sep = " ")
start <- as.POSIXct(start, format = "%d/%m/%Y %H:%M:%S" ) #this converts the start date/time to a format that recognises
#this reads in the actual data:
PM <- read.csv(file = file_name, skip = 36, header = T, check.names = F)
names(PM)
date <- as.POSIXct(PM$`Elapsed Time [s]`, origin = start, tz = "Etc/GMT-10")
PM <- cbind(date, PM)
timePlot(PM, pollutant = "PM2.5 [mg/m3]")
rm(test)
rm(temp)
rm(data)
View(gps)
start_gps = trunc(gps$date[1], units = "mins")
gps10s <- timeAverage(gps, avg.time = "10 sec", start.date = start_gps)
start_pm = trunc(pm$date[1], units = "mins")
start_pm = trunc(PM$date[1], units = "mins")
pm10s <- timeAverage(PM, avg.time = "10 sec", start.date = start_pm)
data <- merge(pm10s, gps10s, all = T)
test <- data
GoogleMapsPlot(test, latitude = "lat", longitude = "lon", pollutant = "PM2.5 [mg/m3]", cex = 1,  maptype = "satellite")
timePlot(test, pollutant = "PM2.5 [mg/m3]")
View(data)
load("~/R_MUMBA/Data/Reg.trajs.RData")
View(reg.trajs)
reg.trajs$Daytest <- as.Date(reg.trajs.$date)
reg.trajs$Daytest <- as.Date(reg.trajs$date)
length(reg.trajs)
length(reg.trajs$date)
14.6^1183
library(openair)
library(plyr)
library(lattice)
library(latticeExtra)
#load in data
setwd("C:/Documents and Settings/eag873/My Documents/R_Model_Intercomparison/Campaign data")
load("BOM_data_updated.RData")
setwd("C:/Documents and Settings/eag873/My Documents/R_Model_Intercomparison/Model output/")
load("ANSTO_model_output.RData")
load("CMAQ_model_output.RData")
BOM <- bom_data_all_campaigns
models <- rbind.fill(wrf, cmaq)
site_list <- levels(as.factor(BOM$site))
species_list <- c("temp", "RH", "ws", "u10", "v10", "prcp", "pblh")
species_names <- c("temperature", "RH (%)", "wind speed (m/s)", "u wind", "v wind", "precip", "pblh")
date_start <- c("21/12/2012","01/02/2011", "01/04/2012") #check proper dates
date_end <- c("15/02/2013","07/03/2011","17/05/2012") #check proper dates
stat_list <- c("r", "RMSE", "MB")
model_met <- subset(models, site %in% site_list)
site_lat <- as.numeric(levels(as.factor(model_met$site_lat)))
site_lon <- as.numeric(levels(as.factor(model_met$site_lon)))
site <- site_list
site_info <- data.frame(site, site_lat, site_lon)
met <- merge(BOM, model_met, by = c("date", "site", "campaign"), suffixes = c(".obs", ".mod"), all = TRUE)
BOM$data_source <- "OBS"
met_ln <- rbind.fill(BOM, model_met)
for (i in 1:length(species_list)) {
d <- timeVariation(met_ln, pollutant = species_list[i], group = "data_source", type = "campaign", ci = T, ylab = species_names[i])
print(d, subset = "hour")
for (j in 1:length(date_start)){
scatterPlot(selectByDate(met_ln, start = date_start[j], end = date_end[j]), x = "date", y = species_list[i], ylab = species_names[i], group = "data_source", type = "campaign", plot.type = "l")
}
}
warnings()
setwd("C:/Users/eag873/Documents/GitHub/Model_evaluation/Figures/met_paper")
setwd("C:/Documents and Settings/eag873/My Documents/R_Model_Intercomparison/Model output/")
#load in data
setwd("C:/Documents and Settings/eag873/My Documents/R_Model_Intercomparison/Campaign data")
load("BOM_data_updated.RData")
setwd("C:/Documents and Settings/eag873/My Documents/R_Model_Intercomparison/Model output/")
load("ANSTO_model_output.RData")
load("CMAQ_model_output.RData")
#assign variables
BOM <- bom_data_all_campaigns
models <- rbind.fill(wrf, cmaq)
site_list <- levels(as.factor(BOM$site))
species_list <- c("temp", "RH", "ws", "u10", "v10", "prcp", "pblh")
species_names <- c("temperature", "RH (%)", "wind speed (m/s)", "u wind", "v wind", "precip", "pblh")
date_start <- c("21/12/2012","01/02/2011", "01/04/2012") #check proper dates
date_end <- c("15/02/2013","07/03/2011","17/05/2012") #check proper dates
stat_list <- c("r", "RMSE", "MB")
#select sites
model_met <- subset(models, site %in% site_list)
#create site info
site_lat <- as.numeric(levels(as.factor(model_met$site_lat)))
site_lon <- as.numeric(levels(as.factor(model_met$site_lon)))
site <- site_list
site_info <- data.frame(site, site_lat, site_lon)
#merge obs and model output into wide format
met <- merge(BOM, model_met, by = c("date", "site", "campaign"), suffixes = c(".obs", ".mod"), all = TRUE)
#merge obs and model output into long format
BOM$data_source <- "OBS"
met_ln <- rbind.fill(BOM, model_met)
#plot diurnal cycles and time series for all species in species_list
for (i in 1:length(species_list)) {
d <- timeVariation(met_ln, pollutant = species_list[i], group = "data_source", type = "campaign", ci = T, ylab = species_names[i])
setwd("C:/Users/eag873/Documents/GitHub/Model_evaluation/Figures/met_analysis")
png(filename = paste(species_list[i],"diurnal.png", sep = '_'), width = 4 * 300, height = 3 * 300, res = 300)
print(d, subset = "hour")
dev.off()
}
#assign variables
BOM <- bom_data_all_campaigns
models <- rbind.fill(wrf, cmaq)
site_list <- levels(as.factor(BOM$site))
species_list <- c("temp", "RH", "ws","wd", "u10", "v10", "prcp", "pblh")
species_names <- c("temperature", "RH (%)", "wind speed (m/s)", "wind direction",  "u wind", "v wind", "precip", "pblh")
date_start <- c("21/12/2012","01/02/2011", "01/04/2012") #check proper dates
date_end <- c("15/02/2013","07/03/2011","17/05/2012") #check proper dates
stat_list <- c("r", "RMSE", "MB")
#select sites
model_met <- subset(models, site %in% site_list)
#create site info
site_lat <- as.numeric(levels(as.factor(model_met$site_lat)))
site_lon <- as.numeric(levels(as.factor(model_met$site_lon)))
site <- site_list
site_info <- data.frame(site, site_lat, site_lon)
#merge obs and model output into wide format
met <- merge(BOM, model_met, by = c("date", "site", "campaign"), suffixes = c(".obs", ".mod"), all = TRUE)
#merge obs and model output into long format
BOM$data_source <- "OBS"
met_ln <- rbind.fill(BOM, model_met)
#plot diurnal cycles and time series for all species in species_list
for (i in 1:length(species_list)) {
d <- timeVariation(met_ln, pollutant = species_list[i], group = "data_source", type = "campaign", ci = T, ylab = species_names[i], key.columns = 2)
setwd("C:/Users/eag873/Documents/GitHub/Model_evaluation/Figures/met_analysis")
png(filename = paste(species_list[i],"diurnal.png", sep = '_'), width = 6 * 300, height = 4 * 300, res = 300)
print(d, subset = "hour")
dev.off()
}
scatterPlot(selectByDate(met_ln, start = date_start[j], end = date_end[j]), x = "date", y = species_list[i], ylab = species_names[i], type = c("campaign", "data_source"), plot.type = "l")
for (i in 1:length(species_list)) {
for (j in 1:length(date_start)){
png(filename = paste(species_list[i],"timeseries.png", sep = '_'), width = 6 * 300, height = 4 * 300, res = 300)
scatterPlot(selectByDate(met_ln, start = date_start[j], end = date_end[j]), x = "date", y = species_list[i], ylab = species_names[i], type = c("campaign", "data_source"), plot.type = "l")
dev.off()
}
}
for (i in 1:length(species_list)) {
for (j in 1:length(date_start)){
png(filename = paste(species_list[i],"timeseries.png", sep = '_'), width = 6 * 300, height = 4 * 300, res = 300)
scatterPlot(selectByDate(met_ln, start = date_start[j], end = date_end[j]), x = "date", y = species_list[i], ylab = species_names[i], group = "data_source", type = "campaign", plot.type = "l")
dev.off()
}
}
for (k in 1:length(site_list)) {
for (i in 1:length(species_list)) {
d <- timeVariation(subset(met_ln, site %in% site_list[k]), pollutant = species_list[i], group = "data_source", type = "campaign", ci = T, ylab = species_names[i], key.columns = 2)
setwd("C:/Users/eag873/Documents/GitHub/Model_evaluation/Figures/met_analysis")
png(filename = paste(species_list[i],site_list[k],"diurnal.png", sep = '_'), width = 6 * 300, height = 4 * 300, res = 300)
print(d, subset = "hour")
dev.off()
}
}
scatterPlot(wrf_10_MUMBA, x = "date", y = "wd", type = "site")
scatterPlot(wrf_10_MUMBA, x = "date", y = "wd", type = "site", plot.type = "l")
scatterPlot(wrf_11_SP2, x = "date", y = "wd", type = "site", plot.type = "l")
scatterPlot(wrf_11_SPS2, x = "date", y = "wd", type = "site", plot.type = "l")
max(wrf_10_MUMBA$wd, na.rm = T)
min(wrf_10_MUMBA$wd, na.rm = T)
max(wrf_11_SPS2$wd, na.rm = T)
min(wrf_11_SPS2$wd, na.rm = T)
plot(density(wrf$wd))
plot(density(wrf$wd, na.rm = T))
#remove 90 degrees?
wrf$wd1 = wrf$wd-90
#or recalculate from u10 and v10
wrf =  within(wrf, wd2 <- atan2(-u10, -v10) * 360 / 2 / pi)
## correct for negative wind directions
ids = which(wrf$wd_wd2 < 0) # ids where wd < 0
wrf$wd2[ids] = wrf$wd2[ids] + 360
points(density(wrf$wd1, na.rm = T), col = "red")
points(density(wrf$wd2, na.rm = T), col = "blue")
View(wrf)
plot(density(wrf$wd, na.rm = T), xlim = "0, 500")
plot(density(wrf$wd, na.rm = T), xlim = c("0, 500"))
plot(density(wrf$wd, na.rm = T), xlim = c(0, 500))
points(density(wrf$wd1, na.rm = T), col = "red")
points(density(wrf$wd2, na.rm = T), col = "blue")
points(density(cmaq$wd, na.rm = T), ol = "purple")
points(density(cmaq$wd, na.rm = T), col = "purple")
max(cmaq_MUMBA$wd, na.rm = T)
max(cmaq_SPS1$wd, na.rm = T)
wrf =  within(wrf, wd3 <- 270 - atan2(v10, u10) * 180 / pi)
points(density(wrf$wd3, na.rm = T), col = "green")
wrf =  within(wrf, wd3 <- 270 - atan2(u10, v10) * 180 / pi)
points(density(wrf$wd3, na.rm = T), col = "green")
wrf =  within(wrf, wd3 <- 270 - atan2(v10, u10) * 180 / pi)
plot(density(wrf$wd, na.rm = T), xlim = c(0, 500))
points(density(wrf$wd1, na.rm = T), col = "red")
points(density(wrf$wd2, na.rm = T), col = "blue")
points(density(wrf$wd3, na.rm = T), col = "green")
points(density(cmaq$wd, na.rm = T), col = "purple")
plot(wrf$wd, na.rm = T)
plot(wrf$wd)
hist(wrf$wd)
hist(wrf$wd1)
hist(wrf$wd2)
hist(wrf$wd3)
timeVariation(wrf, pollutant = (wd, wd1,wd2,wd3))
timeVariation(wrf, pollutant = c(wd, wd1,wd2,wd3))
timeVariation(wrf, pollutant = c(wd1,wd2,wd3))
View(wrf)
timeVariation(wrf, pollutant = c("wd","wd1",'wd2',"wd3"))
timeVariation(wrf, pollutant = c("wd","wd1",'wd2',"wd3"), type = "campaign")
cmaq <- within(cmaq, wd2 <- atan2(-u10, -v10) * 180 / pi)
plot(density(cmaq$wd, na.rm = T))
plot(density(cmaq$wd2, na.rm = T), col = "red", type = "l")
points(density(cmaq$wd2, na.rm = T), col = "red", type = "l")
points(density(cmaq$wd2, na.rm = T), col = "red", type = "l")
cmaq <- within(cmaq, wd2 <- atan2(u10, v10) * 180 / pi)
plot(density(cmaq$wd, na.rm = T))
points(density(cmaq$wd2, na.rm = T), col = "red", type = "l")
cmaq <- within(cmaq, wd2 <- atan2(-u10, -v10) * 180 / pi)
plot(density(cmaq$wd, na.rm = T))
plot(density(cmaq$wd, na.rm = T), xlim = c(-200, 500))
points(density(cmaq$wd2, na.rm = T), col = "red", type = "l")
cmaq =  within(cmaq, wd3 <- 270 - atan2(v10, u10) * 180 / pi)
points(density(cmaq$wd3, na.rm = T), col = "blue", type = "l")
ids = which(wrf$wd$wd2 < 0) # ids where wd < 0
ids = which(wrf$wd2 < 0) # ids where wd < 0
wrf$wd2[ids] = wrf$wd2[ids] + 360
plot(density(wrf$wd, na.rm = T), xlim = c(0, 500))
points(density(wrf$wd1, na.rm = T), col = "red")
points(density(wrf$wd2, na.rm = T), col = "blue")
points(density(wrf$wd3, na.rm = T), col = "green")
points(density(cmaq$wd, na.rm = T), col = "purple")
cmaq <- within(cmaq, wd2 <- atan2(-u10, -v10) * 180 / pi)
ids = which(cmaq$wd2 < 0) # ids where wd < 0
cmaq$wd2[ids] = cmaq$wd2[ids] + 360
plot(density(cmaq$wd, na.rm = T), xlim = c(-200, 500))
points(density(cmaq$wd2, na.rm = T), col = "red", type = "l")
points(density(cmaq$wd3, na.rm = T), col = "blue", type = "l")
library(ncdf4)
library(stringi)
library(reshape2)
campaign <- c("SPS1", "SPS2", "MUMBA")
config <- c("10", "11")
setwd("C:/Documents and Settings/eag873/My Documents/R_Model_Intercomparison/Model output/waspss-ansto/timeseries_extract_2")
for (i in 1:length(campaign)) {
for (ii in 1:length(config)){
fname <- paste0("ANSTO-radon-wrfchem_d04_",campaign[i],"_config-",config[ii],".nc")
ncin <- nc_open(fname)
#create a date vector
time <- ncvar_get(ncin,"time")
time = time*3600 #*3600 because R expect time in seconds since, not hours since (but is this conversion OK?)
date <- as.POSIXct(time, origin = "2000-01-01 00:00:00", tz = "UTC")
#get site info variables in
site_name <- ncvar_get(ncin, "site_name")
site_lon <- ncvar_get(ncin,"site_lon")
site_lat <- ncvar_get(ncin,"site_lat")
site_owner <- ncvar_get(ncin,"site_owner")
#create a site vector containing the site names in a more usable format
#remove white spaces to the right
site_name <- stri_trim_right(site_name, pattern = "\\P{Wspace}")
#replace white spaces between words by "_"
site_name <- stri_replace_all_charclass(site_name, "\\p{WHITE_SPACE}", "_")
#Replace MUMBA_University_site by UOW
site_name[c(2)] <- "UOW"
#site_name[c(2,29)] <- c("UOW", "Warrawong")
site <- site_name
#do a similar thing for site owner
site_owner <- stri_trim_right(site_owner, pattern = "\\P{Wspace}")
site_owner <- stri_replace_all_fixed(site_owner, pattern = "BoM", "BOM")
site_owner <- stri_replace_all_fixed(site_owner, pattern = "UoW", "UOW")
#create a site_info dataframe
site_info <- data.frame(site, site_lat, site_lon, site_owner)
str(site_info)
#Create dataframe containing model observations
#Create a list containing all the variable names
list_var <- row.names(summary(ncin$var))
#'Get' the first variable in manually, and create the dataframe "data". The loop will then add to that dataframe.
#This should ensure that the dataframe has the right length
v  <- ncvar_get(ncin, list_var[9]) #start at nine because this is where the observations start
v <- data.frame(v[,2,2,])
names(v) <- site
data <- data.frame(date, v)
data <- melt(data, id.vars = "date")
names(data)[c(1,2,3)] <- c("date", "site", list_var[9])
#then, use loop to add all the others
for (j in 10:length(list_var)) { #start at nine because the first 8 ones are not in a 3 x 3 format, and the 9th one is in data already
v <- ncvar_get(ncin, list_var[j])
v <- data.frame(v[,2,2,])
names(v) <- site
v <- melt(v)
data <- data.frame(data, v[,2])
}
names(data)[-c(1,2,3)] <- list_var[10:length(list_var)]
#add data_source
data$data_source <- paste0("WRF_",config[ii])
names(data)[c(3,4,5,6,7,10,11,12)] <- c("pblh","wd","ws","u10", "v10", "temp", "pres", "prcp")
#make prcp in mm
data$prcp <- data$prcp*10
#fix wd
data =  within(data, wd <- atan2(-u10, -v10) * 180 / pi)
## correct for negative wind directions
ids = which(data$wd < 0) # ids where wd < 0
data$wd[ids] = data$wd[ids] + 360
#add campaign tag
data$campaign <- campaign[i]
#add site info to dataframe
data <- merge(data, site_info, by = "site")
#save the dataframe as something else
dataframe_name <- paste0("wrf_",config[ii],"_",campaign[i])
assign(dataframe_name,data)
}
}
wrf <- rbind(wrf_10_MUMBA,wrf_10_SPS1,wrf_10_SPS2,wrf_11_MUMBA,wrf_11_SPS1,wrf_11_SPS2)
timeVariation(wrf, pollutant = "wd", type = "campaign")
scatterPlot(subset(wrf, campaign %in% "SPS1"), x = "date", y = "wd")
scatterPlot(subset(wrf, campaign %in% "SPS1"), x = "date", y = "wd", plot.type = "l")
scatterPlot(subset(wrf, campaign %in% "MUMBA"), x = "date", y = "wd", plot.type = "l")
timeVariation((subset(wrf, campaign %in% "MUMBA"), pollutant = "wd", type = "site")
scatterPlot(subset(wrf, campaign %in% "MUMBA"), x = "date", y = "wd", plot.type = "l")
#set directory and save all dataframes
setwd("C:/Documents and Settings/eag873/My Documents/R_Model_Intercomparison/Model output/")
save(wrf_10_MUMBA,wrf_10_SPS1,wrf_10_SPS2,wrf_11_MUMBA,wrf_11_SPS1,wrf_11_SPS2,wrf, file = "ANSTO_model_output.RData")
load("ANSTO_model_output.RData")
timeVariation(subset(wrf, campaign %in% "MUMBA"), pollutant = "wd", type = "site")
#set directory and save all dataframes
setwd("C:/Documents and Settings/eag873/My Documents/R_Model_Intercomparison/Model output/")
save(wrf_10_MUMBA,wrf_10_SPS1,wrf_10_SPS2,wrf_11_MUMBA,wrf_11_SPS1,wrf_11_SPS2,wrf, file = "ANSTO_model_output.RData")
library(openair)
library(plyr)
library(lattice)
library(latticeExtra)
setwd("C:/Documents and Settings/eag873/My Documents/R_Model_Intercomparison/Campaign data")
load("BOM_data_updated.RData")
setwd("C:/Documents and Settings/eag873/My Documents/R_Model_Intercomparison/Model output/")
load("ANSTO_model_output.RData")
load("CMAQ_model_output.RData")
BOM <- bom_data_all_campaigns
models <- rbind.fill(wrf, cmaq)
site_list <- levels(as.factor(BOM$site))
species_list <- c("temp", "RH", "ws","wd", "u10", "v10", "prcp", "pblh")
species_names <- c("temperature", "RH (%)", "wind speed (m/s)", "wind direction",  "u wind", "v wind", "precip", "pblh")
date_start <- c("21/12/2012","01/02/2011", "01/04/2012") #check proper dates
date_end <- c("15/02/2013","07/03/2011","17/05/2012") #check proper dates
stat_list <- c("r", "RMSE", "MB")
model_met <- subset(models, site %in% site_list)
site_lat <- as.numeric(levels(as.factor(model_met$site_lat)))
site_lon <- as.numeric(levels(as.factor(model_met$site_lon)))
site <- site_list
site_info <- data.frame(site, site_lat, site_lon)
met <- merge(BOM, model_met, by = c("date", "site", "campaign"), suffixes = c(".obs", ".mod"), all = TRUE)
BOM$data_source <- "OBS"
met_ln <- rbind.fill(BOM, model_met)
for (i in 1:length(species_list)) {
d <- timeVariation(met_ln, pollutant = species_list[i], group = "data_source", type = "campaign", ci = T, ylab = species_names[i], key.columns = 2)
setwd("C:/Users/eag873/Documents/GitHub/Model_evaluation/Figures/met_analysis")
png(filename = paste(species_list[i],"diurnal.png", sep = '_'), width = 6 * 300, height = 4 * 300, res = 300)
print(d, subset = "hour")
dev.off()
}
getwd
getwd()
for (i in 1:length(species_list)) {
for (j in 1:length(date_start)){
png(filename = paste(species_list[i],"timeseries.png", sep = '_'), width = 6 * 300, height = 4 * 300, res = 300)
scatterPlot(selectByDate(met_ln, start = date_start[j], end = date_end[j]), x = "date", y = species_list[i], ylab = species_names[i], group = "data_source", type = "campaign", plot.type = "l")
dev.off()
}
}
